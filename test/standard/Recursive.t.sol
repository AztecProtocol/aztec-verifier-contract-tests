// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Aztec
pragma solidity >=0.8.4;

import {TestBase} from "../base/TestBase.sol";
import {RecursiveStandardVerifier} from "../../src/standard/instance/RecursiveStandardVerifier.sol";
import {DifferentialFuzzer} from "../base/DifferentialFuzzer.sol";
import {IVerifier} from "../../src/interfaces/IVerifier.sol";
import {BaseStandardVerifier} from "../../src/standard/BaseStandardVerifier.sol";

contract RecursiveStandardTest is TestBase {
    IVerifier internal verifier;

    // inputs 5, 10, 15
    // proof generated and pasted here as it takes an insane amount of time to generate
    bytes proofData =
        hex

    function setUp() public {
        verifier = IVerifier(address(new RecursiveStandardVerifier()));
    }

    function testProof() public {
        (bytes32[] memory publicInputs, bytes memory proof) = splitProof(proofData, 16);
        assertTrue(verifier.verify(proof, publicInputs), "The proof is not valid");
    }

    function testInvalidRecursiveProofPoint() public {
        _invalidBn128Component(0);
        _invalidBn128Component(4);
        _invalidBn128Component(8);
        _invalidBn128Component(12);
    }

    function _invalidBn128Component(uint256 _index) internal {
        (bytes32[] memory publicInputs, bytes memory proof) = splitProof(proofData, 16);

        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

        publicInputs[_index] = bytes32((q >> 0) & 0x0fffffffffffffffff);
        publicInputs[_index + 1] = bytes32((q >> 68) & 0x0fffffffffffffffff);
        publicInputs[_index + 2] = bytes32((q >> 136) & 0x0fffffffffffffffff);
        publicInputs[_index + 3] = bytes32((q >> 204) & 0x0fffffffffffffffff);

        vm.expectRevert(abi.encodeWithSelector(BaseStandardVerifier.RECURSIVE_PROOF_INVALID_BN128_G1_POINT.selector));
        verifier.verify(proof, publicInputs);
    }
}
